name: CI Tests and Build

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test on Node.js ${{ matrix.node_version }} and platform ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [12.x, 14.x, 16.x]
        platform: [ubuntu-latest, mac-lastest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}
          args: install:ci

      - name: Install dependencies
        run: yarn install:ci

      - name: Run unit tests
        run: yarn test:unit

      - name: Prepare database and run integration tests...
        env:
          STRIPE_SECRET_API_KEY: ${{ secrets.STRIPE_SECRET_API_KEY_TEST }}
          STRIPE_API_VERSION: ${{ secrets.STRIPE_API_VERSION }}
          ELEPHANT_API_KEY: ${{ secrets.ELEPHANT_API_KEY_TEST }}
        run: |
          docker build -t be-a-savior/server . \
          --build-arg ELEPHANT_API_KEY=${{ secrets.ELEPHANT_API_KEY_TEST }} \
          --build-arg STRIPE_SECRET_API_KEY=${{ secrets.STRIPE_SECRET_API_KEY }} \
          --build-arg GITHUB_ACTIONS=$GITHUB_ACTIONS \
          --no-cache

  clean:
    needs: test
    name: Clean test databases with Node.js ${{ matrix.node_version }} and platform ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [16.x]
        platform: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install dependencies
        run: yarn install:ci

      - name: Clean test databases
        env:
          STRIPE_SECRET_API_KEY: ${{ secrets.STRIPE_SECRET_API_KEY_TEST }}
          ELEPHANT_API_KEY: ${{ secrets.ELEPHANT_API_KEY_TEST }}
        run: |
          yarn clean:elephant:instances:team
    
  build:
    name: Build on Node.js ${{ matrix.node_version }} and platform ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [12.x, 14.x, 16.x]
        platform: [ubuntu-latest, mac-lastest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install dependencies
        run: yarn install:ci

      - name: Build
        run: yarn build

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push Docker to Heroku
        env:
          HEROKU_APP_NAME: be-a-savior
          DOCKERFILE_DIRECTORY: "."
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          DOCKERFILE_NAME: "Dockerfile.production"
          DOCKER_OPTIONS: "--no-cache"
        run: |
          cd ${DOCKERFILE_DIRECTORY}
          echo ${HEROKU_API_KEY} | docker login \
            --username=${HEROKU_EMAIL} \
            registry.heroku.com \
            --password-stdin
          docker build \
            -f Dockerfile.production \
            ${DOCKER_OPTIONS} \
            --tag registry.heroku.com/${HEROKU_APP_NAME}/web .
          heroku container:push web --app ${HEROKU_APP_NAME}
          heroku container:release web --app ${HEROKU_APP_NAME}
